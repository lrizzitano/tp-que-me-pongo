@startuml

class Usuario {
    - edad: int
    - ciudad: String
    - borradores: PrendaBorrador[]
    - guardaropas: Guardaropa[]
    - motorDeSugerencias: MotorDeSugerencias
    --
    + getPrendasDisponibles()
    + guardarBorrador(borrador, guardaropa)
    + sugerirAtuendos()
}

class Guardaropa {
    - nombre: String
    - prendas: Prenda[]
    --
    + agregarPrenda(prenda)
    + quitarPrenda(prenda)
}

class GuardaropaCompartido extends Guardaropa {
    - propuestasDeCambio: PropuestaDeCambio[]
    --
    + agregarPropuesta(propuesta)
}

abstract class PropuestaDeCambio {
    # prenda: Prenda
    # guardaropa: GuardaropaCompartido
    # estado: EstadoPropuesta
    --
    + aceptar()
    + deshacer()
    + rechazar()
    + {abstract} aplicarEnGuardaropa()
    + {abstract} revertirEnGuardaropa()
}

class PropuestaDeAgregado extends PropuestaDeCambio {
    --
    + aplicarEnGuardaropa()
    + revertirEnGuardaropa()
}

class PropuestaDeQuitado extends PropuestaDeCambio {
    --
    + aplicarEnGuardaropa()
    + revertirEnGuardaropa()
}

class Atuendo {
    prendas: Prenda[]
}

class Prenda {
    - tipo: TipoDePrenda
    - material: Material
    - trama: Trama
    - formalidad: Formalidad
    - colorPrincial: Color
    - colorSecuandario: Color
    --
    + Categoria()
    + esDeCategoria(Categoria categoria)
    + esDeFormalidad(Formalidad formalidad)
    + esParaTemperatura(double temperatura)
}

class PrendaBorrador {
    - tipo: TipoDePrenda
    - material: Material
    - trama: Trama
    - colorPrincial: Color
    - colorSecuandario: Color
    --
    + setTipo(Tipo)
    + setMaterial(Material)
    + setTrama(Trama)
    + setColorPrincipal(Color)
    + setColorSecundario(Color)
    + crearPrenda()
}

class TipoDePrenda {
    - descripcion: String
    - temperaturaDeUso: RangoDeTemperaturas
    --
    + esParaTemperatura(double temperatura)
}

class MotorDeSugerencias {
    - servicioMeteorologico
    --
    + sugerirAtuendos(Prenda[], Usuario)
}

class MotorDeSugerenciasFormales {
    + sugerirAtuendos(Prenda[], Usuario)
}

class RangoDeTemperaturas {
    - temperaturaMayor: double
    - temperaturaMenor: double
    --
    + contiene(double temperatura)
}

interface ServicioMeteorologico {
    + getTemperatura(String ciudad)
}

class ServicioMeteorologicoAccuWeather {
    - api
    - ultimasRespuestas
    - llamadosDiarios
    --
    + getTemperatura(String ciudad);
}

class RespuestaDeClima {
    - limiteExpiracion
    - respuesta
    --
    + getTemperatura()
    + expiro()
}

enum Trama {
    LISA
    RAYADA
    LUNARES
    CUADROS
    ESTAMPADO
}

enum Color {
    BLANCO
    NEGRO
    GRIS
    ROJO
    NARANJA
    AMARILLO
    VERDE
    AZUL
    CELESTE
    VIOLETA
    ROSA
}

enum Categoria {
    PARTE_SUPERIOR
    CALZADO
    PARTE_INFERIOR
    ACCESORIOS
}

enum Material {
    ALGODON
    LANA
    JEAN
    CUERO
}

enum Formalidad {
    FORMAL
    NEUTRO
    INFORMAL
}

enum EstadoPropuesta {
    PENDIENTE
    ACEPTADA
    RECHAZADA
}

Atuendo -->"*" Prenda
Atuendo -[hidden]r- PrendaBorrador

Usuario --> PrendaBorrador
Usuario ..> Atuendo
Usuario -l-> MotorDeSugerencias
Usuario "*"-r->"*" Guardaropa

Guardaropa -->"*" Prenda

GuardaropaCompartido -->"*" PropuestaDeCambio

PropuestaDeCambio --> Prenda
PropuestaDeCambio -> EstadoPropuesta

PrendaBorrador ..> Prenda

Prenda -l-> TipoDePrenda
Prenda --> Material
Prenda --> Trama
Prenda --> Formalidad
Prenda --> Color

TipoDePrenda -[hidden]u-- MotorDeSugerenciasFormales
TipoDePrenda --> Categoria
TipoDePrenda --> RangoDeTemperaturas

MotorDeSugerencias .r.> Atuendo
MotorDeSugerencias -l-> ServicioMeteorologico

MotorDeSugerenciasFormales -u-|> MotorDeSugerencias

ServicioMeteorologicoAccuWeather .u.|> ServicioMeteorologico
ServicioMeteorologicoAccuWeather -u->"*" RespuestaDeClima

@enduml